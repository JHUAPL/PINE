:py:mod:`pine.backend.pineiaa.bratiaa.agree`
============================================

.. py:module:: pine.backend.pineiaa.bratiaa.agree


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pine.backend.pineiaa.bratiaa.agree.Document
   pine.backend.pineiaa.bratiaa.agree.F1Agreement



Functions
~~~~~~~~~

.. autoapisummary::

   pine.backend.pineiaa.bratiaa.agree.input_generator
   pine.backend.pineiaa.bratiaa.agree.compute_f1
   pine.backend.pineiaa.bratiaa.agree.compute_f1_agreement
   pine.backend.pineiaa.bratiaa.agree.iaa_report



Attributes
~~~~~~~~~~

.. autoapisummary::

   pine.backend.pineiaa.bratiaa.agree.Annotation
   pine.backend.pineiaa.bratiaa.agree.AnnFile
   pine.backend.pineiaa.bratiaa.agree.LOGGER


.. py:data:: Annotation
   

   

.. py:data:: AnnFile
   

   

.. py:data:: LOGGER
   

   

.. py:class:: Document(txt, doc_id)

   .. py:attribute:: __slots__
      :annotation: = ['ann_files', 'txt', 'doc_id']

      


.. py:function:: input_generator(json_list)


.. py:function:: compute_f1(tp, fp, fn)


.. py:class:: F1Agreement(annotators, documents, labels, eval_func=exact_match_instance_evaluation, token_func=None)

   .. py:method:: annotators(self)
      :property:


   .. py:method:: documents(self)
      :property:


   .. py:method:: labels(self)
      :property:


   .. py:method:: _compute_tp_fp_fn(self, documents)


   .. py:method:: _increment_counts(self, annotations, pair, doc, kind)


   .. py:method:: mean_sd_per_label(self)

      Mean and standard deviation of all annotator combinations' F1 scores by label.


   .. py:method:: mean_sd_per_document(self)

      Mean and standard deviation of all annotator combinations' F1 scores per document.


   .. py:method:: mean_sd_total(self)

      Mean and standard deviation of all annotator cominations' F1 scores.


   .. py:method:: mean_sd_per_label_one_vs_rest(self, annotator)

      Mean and standard deviation of all annotator combinations' F1 scores involving given annotator per label.


   .. py:method:: mean_sd_total_one_vs_rest(self, annotator)

      Mean and standard deviation of all annotator combinations' F1 scores involving given annotator.


   .. py:method:: _pairs_involving(self, annotator)


   .. py:method:: _mean_sd(f1_pairs)
      :staticmethod:

      Mean and standard deviation along first axis.


   .. py:method:: print_table(row_label_header, row_labels, avg, stddev, precision=3)
      :staticmethod:


   .. py:method:: compute_total_f1_matrix(self)

      Returns (n x n) matrix, where n is the number of annotators, containing
      pair-wise total F1 scores between all annotators.

      By definition, the matrix is symmetric and F1 = 1 on the main diagonal.


   .. py:method:: draw_heatmap(self, out_path)

      Draws heatmap based on square matrix of F1 scores.



.. py:function:: compute_f1_agreement(annotators, documents, labels, token_func=None, eval_func=None)


.. py:function:: iaa_report(f1_agreement, precision=3)


