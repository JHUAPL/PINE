:py:mod:`pine.backend.data.service`
===================================

.. py:module:: pine.backend.data.service


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pine.backend.data.service.PerformanceHistory



Functions
~~~~~~~~~

.. autoapisummary::

   pine.backend.data.service._standardize_path
   pine.backend.data.service.url
   pine.backend.data.service.where_params
   pine.backend.data.service.params
   pine.backend.data.service.get
   pine.backend.data.service.post
   pine.backend.data.service.put
   pine.backend.data.service.delete
   pine.backend.data.service.patch
   pine.backend.data.service.get_item_by_id
   pine.backend.data.service.get_all_versions_of_item_by_id
   pine.backend.data.service.get_all
   pine.backend.data.service.get_all_items
   pine.backend.data.service.convert_response
   pine.backend.data.service.remove_eve_fields
   pine.backend.data.service.remove_nonupdatable_fields



Attributes
~~~~~~~~~~

.. autoapisummary::

   pine.backend.data.service.logger
   pine.backend.data.service.PATH_TYPE
   pine.backend.data.service.PERFORMANCE_HISTORY


.. py:data:: logger
   

   

.. py:data:: PATH_TYPE
   

   Type for paths that can be passed into these messages.  Either a single string, or a list-like
   type of strings that is combined with a '/'.


.. py:class:: PerformanceHistory

   Bases: :py:obj:`object`

   .. py:method:: pformat(self, **kwargs)


   .. py:method:: pprint(self)


   .. py:method:: add(self, rest_type: str, path: str, response)



.. py:data:: PERFORMANCE_HISTORY
   

   

.. py:function:: _standardize_path(path: PATH_TYPE, *additional_paths: List[str]) -> List[str]


.. py:function:: url(path: PATH_TYPE, *additional_paths: List[str]) -> str

   Returns a complete URL for the given eve-relative path(s).

   :param path: str: eve-relative path (e.g. "collections" or ["collections", id])
   :param additional_paths: str[]: any additional paths to append
   :return: url
   :rtype: str


.. py:function:: where_params(where: dict) -> dict

   Returns a "where" parameters object that can be passed to eve.

   Eve requires that dict parameters be serialized as JSON.

   :param where: dict: dictionary of "where" params to pass to eve
   :return: "where" params in eve-appropriate format
   :rtype: dict


.. py:function:: params(params: dict) -> dict

   Returns a parameters object that can be passed to eve.

   Eve requires that dict parameters be serialized as JSON.

   :param where: dict: dictionary of "where" params to pass to eve
   :return: params in eve-appropriate format
   :rtype: dict


.. py:function:: get(path: PATH_TYPE, **kwargs: dict) -> requests.Response

   Wraps requests.get for the given eve-relative path.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param **kwargs: dict: any additional arguments to pass to requests.get
   :return: server response
   :rtype: requests.Response


.. py:function:: post(path: PATH_TYPE, **kwargs: dict) -> requests.Response

   Wraps requests.post for the given eve-relative path.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param **kwargs: dict: any additional arguments to pass to requests.post
   :return: server response
   :rtype: requests.Response


.. py:function:: put(path: PATH_TYPE, **kwargs: dict) -> requests.Response

   Wraps requests.put for the given eve-relative path.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param **kwargs: dict: any additional arguments to pass to requests.put
   :return: server response
   :rtype: requests.Response


.. py:function:: delete(path: PATH_TYPE, **kwargs: dict) -> requests.Response

   Wraps requests.delete for the given eve-relative path.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param **kwargs: dict: any additional arguments to pass to requests.delete
   :return: server response
   :rtype: requests.Response


.. py:function:: patch(path: PATH_TYPE, **kwargs: dict) -> requests.Response

   Wraps requests.patch for the given eve-relative path.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param **kwargs: dict: any additional arguments to pass to requests.patch
   :return: server response
   :rtype: requests.Response


.. py:function:: get_item_by_id(path: PATH_TYPE, item_id: str, params: dict = {}) -> dict

   Gets a single item by the given ID.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param item_id: str: item ID
   :param params: dict: optional additional parameters to send in with GET
   :return: the item as a dict
   :rtype: dict


.. py:function:: get_all_versions_of_item_by_id(path: PATH_TYPE, item_id: str, params: dict = {}) -> List[dict]

   Gets all versions of an item by the given ID.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param item_id: str: item ID
   :param params: dict: optional additional arguments to send in with GET
   :return: the items as a list of dicts
   :rtype: list[dict]


.. py:function:: get_all(path: PATH_TYPE, params={}) -> dict

   Returns ALL database items, using pagination if needed.  This returns the "normal" eve
   JSON with "_items", "_meta", etc.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param params: dict: optional additional parameters to send in with GET
   :return: an eve collections dict with, e.g., _items
   :rtype: dict


.. py:function:: get_all_items(path: PATH_TYPE, params={}) -> List[dict]

   Returns ALL database items, using pagination if needed.

   :param path: list[str]|str: eve-relative path (e.g. ["collections", id] or "/collections")
   :param params: dict: optional additional parameters to send in with GET
   :return: the items as a list of dicts
   :rtype: list[dict]


.. py:function:: convert_response(requests_response: requests.Response) -> flask.Response

   Converts a requests response to a flask response.

   :param requests_response: requests.Response: response from requests library
   :returns: a flask response
   :rtype: flask.Response


.. py:function:: remove_eve_fields(obj: dict, remove_timestamps: bool = True, remove_versions: bool = True) -> None

   Removes the fields that eve adds that aren't necessarily relevant to the data.  The object
   that is passed in is modified in-place.

   This currently includes: `_etag`, `_links`, `_created` (if `remove_timestamps`), `_updated` (if
   `remove_timestamps`), `_version` (if `remove_versions`), and `_latest_version` (if
   `remove_versions`).

   :param obj: dict: the object to modify
   :param remove_timestamps: bool: whether to remove timestamp fields (defaults to `True`)
   :param remove_versions: bool: whether to remove version fields (defaults to `True`)


.. py:function:: remove_nonupdatable_fields(obj: dict) -> None

   Removes the non-updatable fields in the given eve object.  This is currently equivalent to
   calling ... with all the default options.

   :param obj: dict: the object to modify


