:py:mod:`pine.pipelines.app.listener.service_listener`
======================================================

.. py:module:: pine.pipelines.app.listener.service_listener


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pine.pipelines.app.listener.service_listener.ServiceRegistration
   pine.pipelines.app.listener.service_listener.ServiceListener




Attributes
~~~~~~~~~~

.. autoapisummary::

   pine.pipelines.app.listener.service_listener.config
   pine.pipelines.app.listener.service_listener.logger


.. py:data:: config
   

   

.. py:data:: logger
   

   

.. py:class:: ServiceRegistration(name, version, channel, framework, framework_types)

   Bases: :py:obj:`object`

   .. py:method:: from_registration_format(cls, **kwargs)
      :classmethod:


   .. py:method:: to_registration_format(self)



.. py:class:: ServiceListener(services=None)

   Bases: :py:obj:`object`

   
   :type services: list[ServiceRegistration]

   .. py:attribute:: r_pool
      

      

   .. py:attribute:: r_conn
      

      

   .. py:attribute:: registration_poll
      

      

   .. py:attribute:: listener_poll
      

      

   .. py:attribute:: processor_poll
      

      

   .. py:attribute:: processing_limit
      

      

   .. py:attribute:: processing_queue_key
      

      

   .. py:attribute:: processing_queue_key_timeout
      

      

   .. py:attribute:: results_queue_key
      

      

   .. py:attribute:: results_queue_key_timeout_s
      

      

   .. py:attribute:: running_jobs_key
      

      

   .. py:attribute:: classifiers_training_key
      

      

   .. py:attribute:: processing_lock_key
      

      

   .. py:attribute:: processing_lock_key_timeout
      

      

   .. py:attribute:: preprocessing_lock_key
      

      

   .. py:attribute:: preprocessing_lock_key_timeout
      

      

   .. py:attribute:: preprocessing_worker_lock_key
      

      

   .. py:attribute:: preprocessing_worker_lock_key_timeout
      

      

   .. py:attribute:: registration_channel
      

      

   .. py:method:: start_workers(self)


   .. py:method:: stop_workers(self)


   .. py:method:: pre_process_message(self, message_channel, message_data)

      :type message_channel: str
      :type message_data: str | bytes
      :rtype: bool | dict


   .. py:method:: do_with_redis(callback: Callable[[redis.StrictRedis], Any])
      :staticmethod:


   .. py:method:: push_results(job_id: str, response, expire_timeout=results_queue_key_timeout_s)
      :staticmethod:


   .. py:method:: wait_until_classifier_isnt_training(classifier_id: str, job_id: str)
      :staticmethod:


   .. py:method:: classifier_is_done_training(classifier_id: str)
      :staticmethod:


   .. py:method:: process_message(job_id: str, job_details)
      :staticmethod:


   .. py:method:: _start_registration_task(self)


   .. py:method:: _start_channel_task(self)


   .. py:method:: _start_listener_task(self)


   .. py:method:: _start_queue_processor_task(self)



