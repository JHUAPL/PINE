:py:mod:`pine.pipelines.pipeline`
=================================

.. py:module:: pine.pipelines.pipeline


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pine.pipelines.pipeline.NerPrediction
   pine.pipelines.pipeline.DocumentPredictions
   pine.pipelines.pipeline.NerPredictionProbabilities
   pine.pipelines.pipeline.DocumentPredictionProbabilities
   pine.pipelines.pipeline.Pipeline




.. py:class:: NerPrediction(offset_start: int, offset_end: int, label: str)

   Bases: :py:obj:`object`

   .. py:method:: serialize(self) -> Tuple[int, int, str]



.. py:class:: DocumentPredictions(ner: List[NerPrediction], doc: List[str], extra_data: Any = None)

   Bases: :py:obj:`object`

   .. py:method:: serialize(self) -> dict



.. py:class:: NerPredictionProbabilities(offset_start: int, offset_end: int, predictions: List[Tuple[str, float]])

   Bases: :py:obj:`object`

   .. py:method:: get_highest_prediction(self) -> Tuple[str, float]


   .. py:method:: get_predictions_from_highest_to_lowest(self) -> List[Tuple[str, float]]


   .. py:method:: serialize(self) -> Tuple[int, int, List[Tuple[str, float]]]



.. py:class:: DocumentPredictionProbabilities(ner: List[NerPredictionProbabilities], doc: List[Tuple[str, float]])

   Bases: :py:obj:`object`

   .. py:method:: serialize(self) -> dict



.. py:class:: Pipeline

   Bases: :py:obj:`object`

   .. py:method:: status(self) -> dict
      :abstractmethod:


   .. py:method:: fit(self, X, y, **params) -> dict
      :abstractmethod:


   .. py:method:: predict(self, X: Iterable[str]) -> List[DocumentPredictions]
      :abstractmethod:


   .. py:method:: predict_proba(self, X: Iterable[str], **kwargs) -> List[DocumentPredictionProbabilities]
      :abstractmethod:


   .. py:method:: next_example(self, X, Xid)
      :abstractmethod:


   .. py:method:: save_model(self, model_name)
      :abstractmethod:


   .. py:method:: load_model(self, model_name)
      :abstractmethod:



