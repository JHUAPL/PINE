:py:mod:`pine.pipelines.RankingFunctions`
=========================================

.. py:module:: pine.pipelines.RankingFunctions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pine.pipelines.RankingFunctions.rank
   pine.pipelines.RankingFunctions.least_confidence
   pine.pipelines.RankingFunctions.least_confidence_squared
   pine.pipelines.RankingFunctions.least_confidence_squared_by_entity
   pine.pipelines.RankingFunctions.largest_margin
   pine.pipelines.RankingFunctions.entropy_rank
   pine.pipelines.RankingFunctions.random_rank
   pine.pipelines.RankingFunctions.most_of_least_popular



Attributes
~~~~~~~~~~

.. autoapisummary::

   pine.pipelines.RankingFunctions.logger


.. py:data:: logger
   

   

.. py:function:: rank(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities], metric: str) -> List[Tuple[str, float]]

   if metric == 'lc': return least_confidence(results)
   if metric == 'ma': return largest_margin(results)
   if metric == 'en': return entropy_rank(results)
   if metric == 'lcs': return least_confidence_squared(results)
   if metric == 'lce': return least_confidence_squared_by_entity(results)
   if metric == 'ra': return random_rank(results)
   if metric == 'mlp': return most_of_least_popular(results)
   return -1

   #Dictionary method is inefficient as it runs every method before returning one


.. py:function:: least_confidence(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


.. py:function:: least_confidence_squared(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


.. py:function:: least_confidence_squared_by_entity(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


.. py:function:: largest_margin(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


.. py:function:: entropy_rank(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities], N=None) -> List[Tuple[str, float]]


.. py:function:: random_rank(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


.. py:function:: most_of_least_popular(document_ids: List[str], results: List[pine.pipelines.pipeline.DocumentPredictionProbabilities]) -> List[Tuple[str, float]]


